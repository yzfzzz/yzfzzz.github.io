{"pages":[],"posts":[{"title":"Hexo+GitHub+Vercel搭建个人博客网站","text":"⭐前段时间动手搭了一个博客网站 FengLibrary ，主要是用了Hexo+GitHubPages+Vercel框架。 环境搭建：nodejs+Git； 写作：Typora,PicGo+阿里云OSS 域名管理：namesilo Hexo安装nodejsHexo是一个快速、简洁且高效的博客框架。 因为Hexo是基于nodejs的，所以要使用Hexo，那么第一步肯定是安装nodejs nodejs下载地址：http://nodejs.cn/ 直接安装，完成后，在cmd上输入node -v和npm -v查看是否安装成功，这两条命令如果都输出了版本号，那么就表示安装成功了，如下: 1234node -v-&gt; v16.14.0npm -v-&gt; 8.3.1 nodejs准备就绪了，那么现在就可以有请第一位主角Hexo出场了 安装Hexo安装完之后，因为nodejs仓库会被墙掉，所以我们需要更换为国内镜像仓库 在终端中执行： npm config set registry https://registry.npm.taobao.org 执行命令 npm install hexo-cli -g 若出现Hexo的相关信息则表示Hexo安装成功 初始化Hexo博客（个人网站）文件夹cmd命令进入你电脑的D盘，新建Hexo文件夹，如下： 执行命令：hexo init blog blog 为创建的目录，你可以自己定义。使用终端进入到创建好的文件夹blog 执行命令用于更新nodejs的模块：npm install 尝试执行命令：hexo server 如果有如下输出 12INFO Start processingINFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. 说明Hexo的服务已经启动成功了，你可以在你的浏览器访问就会出现你的博客（个人网站）主页了 复制上文中的http://localhost:4000并在浏览器中打开 这样，你就可以看到你的网站在本地的部署 GitHub新建仓库前往 GitHub 注册属于你的账号 (请及时验证邮箱地址) 新建一个仓库，而且得确保你的仓库是 public，同时，仓库名最好是用户名.github.io 打开 Git Bash ，运行下面的命令 : 1ssh-keygen -t rsa -C &quot;{{你的电子邮箱地址}}&quot; 连续 3 次回车，最终会在用户目录下生成个包含公钥私钥等数据的目录 ( 一般是 C:/Users/{{你的用户名}}/.ssh/ ) 。 打开这个目录，找到 id_rsa.pub 文件，用记事本打开并复制里面的内容 粘贴到GitHub仓库的 Key 中，Title 填你喜欢的，点击保存 ( Add SSH Key ) 设置 Git运行下方命令 : 12git config --global user.name &quot;{{你的 GitHub username}}&quot;git config --global user.email &quot;{{你的 GitHub 注册邮箱地址}}&quot; 验证是否成功打开 Git Bash ，运行下面的命令 : 1ssh -T git@github.com # 此处邮箱地址不用改 如果提示 Are you sure you want to continue connecting (yes/no)? 请输入 yes 并回车。 1Hi {{你的 GitHub username}}! You've successfully authenticated, but GitHub does not provide shell access. 看到这个信息则说明配置成功。 部署到 GitHub完成上面的步骤后，你应该能在本地进行预览了，接下来就是推送网站到 Github Pages 了，然后我们就能被其他人访问了。 只需要在我们刚才的博客根目录中的站点配置文件 _config.yml ，设置为你的个人仓库名即可 _config.yml在你的Hexo文件夹下面 记事本打开它（VSCode，NodePad++也OK） 找到最后一行，修改它 在你新建的仓库这里，可以找到repo，复制它 在Hexo文件夹这个位置，点击GitBash，然后依次执行以下命令 123hexo cleanhexo ghexo d 完成上述步骤之后，主要使用如下命令，就能将我们本地的内容推送到远程 GitHub 仓库了，然后在浏览器中访问： https://用户名.github.io 主题优化你可以通过更换主题，并写上你的名字以便修改自己网站的信息并美化它 我用的是icarus主题：https://github.com/AlphaLxy/hexo-theme-icarus 你可以通过链接去下载它，并通过参考文档（Icarus中文文档）改变它 最后效果如下: 镜像加速我们知道，GitHub是国外网站，所以有时候访问会很慢，这时，我们可以尝试用vercel加速博客访问。 注册账号进入登陆页面：https://vercel.com/login，使用 GitHub 账号登陆即可、 导入项目 点击Continue，进入如下界面。 这大概就是大家看到的页面，点击 New Project 按钮，然后点击 Browse All Templates → 按钮，在第 4 行的第 1 个就是 Hexo 点击进去，可以看到图片所示的内容 选择灰框勾选的内容，也就是你的 GitHub，然后点击 Select 按钮，然后点击 GitHub 在 GIT SCOPE 处选择你想要储存 Hexo 的用户，在 REPOSITORY NAME 处填上你想要储存 Hexo 的仓库(你Hexo存放的仓库)，并勾选 Create private Git Repository 选项，这个选项是将该仓库设为私有仓库，对他人不可见。然后点击 Continue 按钮，然后什么都不需要修改，直接点击 Deploy，等待它自动完成构建，3 分钟之内完成，并分发一个免费的二级域名，可以暂时用于使用（不会回收，但不建议使用） 部署完成后，它就和你刚刚所填写的仓库绑定了，一旦你的仓库有什么变化，它就会自动同步部署，全过程大概 5 分钟可以完成部署。 这样，访问 Vercel 给你的域名（类似于https://用户名.github.io-vercel/），就能加速访问你的网站了 自定义域名其实用上面的域名也可以访问，但为了显得专业点，我们可以买个域名绑定它（https://用户名.github.io-vercel/） 如：https://www.yzfenglib.top/ 账户注册进入 Namesilo ，点击右上角 “Create New Account” 注册账号。 * 为必填内容，建议如实填写；勾选 “Keep my information private” 默认使用隐私保护，保护我们的注册信息。 ==注意所有信息都必须是英文的== 最后输入验证码，“Create New Account”，会收到验证邮件，点击链接激活完成注册 购买流程 Step 1 激活账户并登陆，进入主页，在搜索框中输入想要注册的域名，“SEARCH” Step 2 勾选需要的域名后缀，“REGISTER”。如果该域名已被注册，会显示为橙色的 “Registered” 状态，绿色表示可注册。 Step 3 确认订单，设置域名续费规则、注册时长等。输入优惠码 okoff 或者 go2think ，点击 “Submit”应用，优惠一美元。 完成后点击 “CONTINUE” 进入下一步。 Step 4 付款。支持支付宝、Paypal 等。支付宝付款：在右侧输入框填写支付宝绑定的邮箱，点击 “GO” 跳转扫码界面支付 完成！🧡 我是在NameSilo购买的域名，所以就进入NameSilo的管理页面： 选中需要配置的域名，点击上方的Change Nameservers可以更换Name server（我这里已经改过了），点击右侧小小的蓝球可以配置DNS。 把Name Servers改成Vercel提供的两个server（把NameServer 3删除了，添上这两个，要一模一样） 然后按Vercel的要求把DNS改为 PS：NameServer、DNS可以在Vercel找到 进入这个Vercel deployment的界面： 点View Domains就会直接跳到配置域名的选项： 输入你购买的域名（https://www.yzfenglib.top/）点击add就能绑定域名了 以后想要修改网站的话，只需要将改动push到GitHub上，vercel会自动把改动同步过来，完全不用管，超省心。 在一级域名配置好之后，也可以直接在vercel中使用二级域名，无需进行额外设置。 写作我用的是：Typora,PicGo+阿里云OSS，Typora+PicGo+阿里云OSS搭建博客图床（超详细）配置写作环境 参考资料使用Vercel+GitHub快速构建Hexo博客 手把手教你使用Hexo+GiteePages搭建一个免费的个人博客（个人网站）-小白看了也能搞 使用Vercel+GitHub快速构建Hexo博客 Namesilo 域名购买及使用教程（附 Namesilo 优惠码） 搭建个人网站（2）：Github和Vercel建站以及配置DNS","link":"/2022/04/02/Hexo+GitHub+Vercel/"},{"title":"Hello world","text":"⭐FengLibrary始建于2022.3.29，由YeZifeng（ID：什么都只会一点）搭建并维护 🍔为什么叫FengLibrary？ 意思很好理解，希望这个网站能成为我的图书馆，主要功能为存放笔记和方便随时查阅。要学知识太多，不可能全部记住，所以做笔记就显得很必要。对于我来说，笔记必须要满足两个条件：1️⃣.专注于码字，而不是排版【所以我选择了Typora】 2️⃣.查找方便，最好是云端储存，所以便诞生了这个网站 🍞内容和质量？ 内容主要为CV方面的知识，同样嵌入式，AD方面也会有涉及 🍺网站会关闭吗？ 由于是静态网站，不需要服务器，所以只要我不删库跑路，就会一直运行","link":"/2022/03/31/blog3-31/"},{"title":"在OpenCV中加载彩色图像并将其显示在Matplotlib中","text":"❓问:如何在OpenCV中加载彩色图像并将其显示在Matplotlib中?🚑 我的答案12345678910111213141516171819import cv2import numpy as npfrom matplotlib import pyplot as pltimg1 = cv2.imread('rose.jpg',cv2.COLOR_BGR2GRAY) #以BGR格式读取图片# opencv:BGR; Matplotlib:RGB# opencv:蓝0绿1红2cv2.imwrite('homework.jpg',img1[:,:,[2,1,0]]) #将原红色通道的值写到BGR的蓝色通道，原蓝色通道的值写进BGR的R通道 #简单说就是将BGR改为RGB格式，并保存 img2 = cv2.imread('homework.jpg',cv2.COLOR_BGR2GRAY) #读取图片plt.imshow(img2,cmap='gray',interpolation='bicubic') plt.xticks([]),plt.yticks([]) #隐藏x，y轴plt.show()cv2.waitKey(0)cv2.destroyAllWindows() 简而言之，我的答案非常low，就不对此分析 索引法1234567891011121314151617import cv2import numpy as npfrom matplotlib import pyplot as pltimg1 = cv2.imread('rose.jpg',cv2.COLOR_BGR2GRAY)# opencv:BGR; Matplotlib:RGB# opencv:蓝0绿1红2img1 = img1[:,:,::-1] #使用 NumPy 索引，图片的B，R通道翻转plt.imshow(img1,cmap='gray',interpolation='bicubic') plt.xticks([]),plt.yticks([])plt.show()cv2.waitKey(0)cv2.destroyAllWindows() 索引和切片操作，最后一维是颜色，-1表示翻转，颜色由红变蓝;白色颠倒不会发生变化 123cv2.imshow('rose', rose[:, :, ::-1]) #颜色颠倒cv2.imshow('rose', rose[::-1, :,:]) #上下颠倒cv2.imshow('rose', rose[:,::-1,:]) #左右颠倒 切片法123456789101112131415import cv2import numpy as npimport matplotlib.pyplot as pltimg = cv2.imread('rose.jpg')b,g,r = cv2.split(img)img2 = cv2.merge([r,g,b])plt.subplot(121);plt.imshow(img) # expects distorted colorplt.subplot(122);plt.imshow(img2) # expect true colorplt.show()cv2.imshow('bgr image',img) # expects true colorcv2.imshow('rgb image',img2) # expects distorted colorcv2.waitKey(0)cv2.destroyAllWindows() cv2.split(img)函数 功能：通过将三维数组降维的方法，分离出B/G/R的通道 输入参数：图片 示例：b,g,r = cv2.split(img) cv2.merge([r,g,b])函数 功能：通过将一维数组重组升维的方法，合并出三个通道。[]里面的顺序即是图片的颜色格式 输入参数：三个一维数组 示例：img2 = cv2.merge([r,g,b]) cvtColor法（最优解）12345678910111213import cv2import numpy as npimport matplotlib.pyplot as pltimg = cv2.imread('rose.jpg')img1=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)plt.imshow(img1,cmap='gray',interpolation='bicubic')plt.xticks([]),plt.yticks([])plt.show()cv2.waitKey(0)cv2.destroyAllWindows() cv2.cvtColor(img,cv2.COLOR_BGR2RGB)函数 功能：简要将图像从一种颜色空间转换为另一种颜色空间 输入参数： img：已经imread的图片 cv2.COLOR_BGR2RGB：颜色转化的参数 示例：img1=cv2.cvtColor(img,cv2.COLOR_BGR2RGB) 说明：在发生转变的情况下。对于RGB颜色空间，应该显式地指定通道的顺序(RGB或BGR).注意。OpenCV中的默认颜色格式通常被称为RGB，但实际上是BGR。字节反转)。因此，标准(24位)彩色图像中的第一个字节将是8位蓝色。组件，第二个字节将是绿色，第三个字节将是红色。第四，第五，和。第六个字节是第二个像素(蓝色，然后是绿色，然后是红色)，依此类推。 R、G和B通道值的常规范围是：-0到255的CV_8bit图像。-65535到65535的CV_16bit图像。-0到1的CV_32bit图像 代码在OpenCV中加载彩色图像并将其显示在Matplotlib中","link":"/2022/04/05/Matplotlib%E5%85%A5%E9%97%A8/"},{"title":"计算机眼中的图像","text":"本文主要介绍基本的numpy和读取图片的操作 基本读写图像无论哪种格式，每一个像素都会有一个值，但不同格式表示像素的方式有所不同 numpy.zero(）函数 调用该函数，可以通过二维NumPy数组来简单创建一个黑色的正方形图像 1img=numpy.zeros((3,3),dtype=numpy.uint8) 控制台print一下，可得$$[[0 0 0] [0 0 0] [0 0 0]]$$该输出有两个[],说明该图像有两条通道，每一个像素都由一个8-bit整数表示，每个像素的范围是（0~255），其中，0表示最黑，255表示最白 cv2.cvtColor函数 使用该函数，可以把图像转化为BGR格式 1img=cv2.cvtColor(img,cv2.COLOR_GRAY2BGR) 控制台print一下，可得$$[[[0 0 0] [0 0 0] [0 0 0]] [[0 0 0] [0 0 0] [0 0 0]] [[0 0 0] [0 0 0] [0 0 0]]]$$现在，每个像素点都由一个三元数组，并且每一个二维数组/整形（integer）分别表示一个B/G/R通道 img.shape参数 可以通过shape属性来查看图像的结构，它会返回行和列，如果有2个及以上的通道，还会返回通道数 1print(img.shape) 返回（414，500，3）；414代表高【h】，500代表宽【w】，3是通道数【c】/或者说像素红绿蓝也行 图像的读取及保存 12image = cv2.imread('D:/opencv/imgurl/1.png')cv2.imwrite('D:/opencv/imgurl/1.png',image) 这段代码，读取一张png图片，然后把它保存为jpg格式 将图片转换成灰度图，并保存 12grayImage = cv2.imread('D:/opencv/imgurl/1.png',cv2.IMREAD_GRAYSCALE)cv2.imwrite('D:/opencv/imgurl/1.png',grayImage) 打开图像1234567import cv2import numpyimg = cv2.imread('D:/opencv/imgurl/2.jpg')cv2.imshow('p',img)cv2.waitKey()cv2.destroyAllWindows() cv2.imread()函数 1cv2.imread('D:/opencv/imgurl/1.png') 功能：读取图片 输入参数1：图片的路径（仅英文） cv2.imshow()函数 1cv2.imshow('openpng',img) 功能：窗口展示图像 输入参数1是给窗口命名(命名只能是英文)，输入参数2是已imread的图像 cv2.waitKey()函数 12#等待时间，毫秒级别，0表示任意键终止cv2.waitKey(1000) 功能：等待键盘输入，函数WaitKey无限地等待一个键事件，如果没有键，则返回-1；触发这段代码，窗口消失 输入参数1：等待的时间，0表示任意键 cv2.destroyAllWindow（）函数 1cv2.destroyAllWindows() 功能：关掉所有窗口，销毁内存 查询图像的信息123print(type(img1)) #查询底层格式print(img1.size) #计算像素点的个数print(img1.dtype) #查询数据的类型","link":"/2022/04/05/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9C%BC%E4%B8%AD%E7%9A%84%E5%9B%BE%E5%83%8F/"}],"tags":[{"name":"网站搭建","slug":"网站搭建","link":"/tags/%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"GitHub","slug":"GitHub","link":"/tags/GitHub/"},{"name":"网站介绍","slug":"网站介绍","link":"/tags/%E7%BD%91%E7%AB%99%E4%BB%8B%E7%BB%8D/"},{"name":"Opencv4","slug":"Opencv4","link":"/tags/Opencv4/"},{"name":"python","slug":"python","link":"/tags/python/"},{"name":"Matplotlib","slug":"Matplotlib","link":"/tags/Matplotlib/"},{"name":"计算机视觉","slug":"计算机视觉","link":"/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"}],"categories":[{"name":"Hexo","slug":"Hexo","link":"/categories/Hexo/"},{"name":"blog日志","slug":"blog日志","link":"/categories/blog%E6%97%A5%E5%BF%97/"},{"name":"Opencv4","slug":"Opencv4","link":"/categories/Opencv4/"}]}